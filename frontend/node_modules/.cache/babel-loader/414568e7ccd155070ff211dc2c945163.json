{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport aiService from './aiService';\nconst initialState = {\n  goals: [],\n  isError: false,\n  isSuccess: false,\n  isLoading: false,\n  message: ''\n};\nexport const createAi = createAsyncThunk('goals/create', async (goalData, thunkAPI) => {\n  try {\n    const token = thunkAPI.getState().auth.user.token;\n    return await aiService.createAi(goalData, token);\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n}); // Get user goals\n\nexport const getGoals = createAsyncThunk('goals/getAll', async (_, thunkAPI) => {\n  try {\n    const token = thunkAPI.getState().auth.user.token;\n    return await aiService.getGoals(token);\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n}); // Delete user goal\n\nexport const deleteGoal = createAsyncThunk('goals/delete', async (id, thunkAPI) => {\n  try {\n    const token = thunkAPI.getState().auth.user.token;\n    return await aiService.deleteGoal(id, token);\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\nexport const goalSlice = createSlice({\n  name: 'goal',\n  initialState,\n  reducers: {\n    reset: state => initialState\n  },\n  extraReducers: builder => {\n    builder.addCase(createAi.pending, state => {\n      state.isLoading = true;\n    }).addCase(createAi.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.goals.push(action.payload);\n    }).addCase(createAi.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n    }).addCase(getGoals.pending, state => {\n      state.isLoading = true;\n    }).addCase(getGoals.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.goals = action.payload;\n    }).addCase(getGoals.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n    }).addCase(deleteGoal.pending, state => {\n      state.isLoading = true;\n    }).addCase(deleteGoal.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.goals = state.goals.filter(goal => goal._id !== action.payload.id);\n    }).addCase(deleteGoal.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n    });\n  }\n});\nexport const {\n  reset\n} = goalSlice.actions;\nexport default goalSlice.reducer;","map":{"version":3,"sources":["/Users/monroe/Documents/amelia/mern-tutorial/frontend/src/features/goals/goalSlice.js"],"names":["createSlice","createAsyncThunk","aiService","initialState","goals","isError","isSuccess","isLoading","message","createAi","goalData","thunkAPI","token","getState","auth","user","error","response","data","toString","rejectWithValue","getGoals","_","deleteGoal","id","goalSlice","name","reducers","reset","state","extraReducers","builder","addCase","pending","fulfilled","action","push","payload","rejected","filter","goal","_id","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\nimport aiService from './aiService'\n\nconst initialState = {\n  goals: [],\n  isError: false,\n  isSuccess: false,\n  isLoading: false,\n  message: '',\n}\n\nexport const createAi = createAsyncThunk(\n  'goals/create',\n  async (goalData, thunkAPI) => {\n    try {\n      const token = thunkAPI.getState().auth.user.token\n      return await aiService.createAi(goalData, token)\n    } catch (error) {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString()\n      return thunkAPI.rejectWithValue(message)\n    }\n  }\n)\n\n// Get user goals\nexport const getGoals = createAsyncThunk(\n  'goals/getAll',\n  async (_, thunkAPI) => {\n    try {\n      const token = thunkAPI.getState().auth.user.token\n      return await aiService.getGoals(token)\n    } catch (error) {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString()\n      return thunkAPI.rejectWithValue(message)\n    }\n  }\n)\n\n// Delete user goal\nexport const deleteGoal = createAsyncThunk(\n  'goals/delete',\n  async (id, thunkAPI) => {\n    try {\n      const token = thunkAPI.getState().auth.user.token\n      return await aiService.deleteGoal(id, token)\n    } catch (error) {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString()\n      return thunkAPI.rejectWithValue(message)\n    }\n  }\n)\n\nexport const goalSlice = createSlice({\n  name: 'goal',\n  initialState,\n  reducers: {\n    reset: (state) => initialState,\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(createAi.pending, (state) => {\n        state.isLoading = true\n      })\n      .addCase(createAi.fulfilled, (state, action) => {\n        state.isLoading = false\n        state.isSuccess = true\n        state.goals.push(action.payload)\n      })\n      .addCase(createAi.rejected, (state, action) => {\n        state.isLoading = false\n        state.isError = true\n        state.message = action.payload\n      })\n      .addCase(getGoals.pending, (state) => {\n        state.isLoading = true\n      })\n      .addCase(getGoals.fulfilled, (state, action) => {\n        state.isLoading = false\n        state.isSuccess = true\n        state.goals = action.payload\n      })\n      .addCase(getGoals.rejected, (state, action) => {\n        state.isLoading = false\n        state.isError = true\n        state.message = action.payload\n      })\n      .addCase(deleteGoal.pending, (state) => {\n        state.isLoading = true\n      })\n      .addCase(deleteGoal.fulfilled, (state, action) => {\n        state.isLoading = false\n        state.isSuccess = true\n        state.goals = state.goals.filter(\n          (goal) => goal._id !== action.payload.id\n        )\n      })\n      .addCase(deleteGoal.rejected, (state, action) => {\n        state.isLoading = false\n        state.isError = true\n        state.message = action.payload\n      })\n  },\n})\n\nexport const { reset } = goalSlice.actions\nexport default goalSlice.reducer\n"]},"metadata":{},"sourceType":"module"}